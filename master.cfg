# -*- python -*-
# ex: set syntax=python:

import os

# This is the buildmaster config file for openerp buildout setups.
# It must be installed as 'master.cfg' in your buildmaster's base directory.
# It depends on anybox.buildout.openerp to create the configuration from
# some other external files, which are supposed to be in base directory as
# well.
import anybox.buildbot.openerp
# register the buildmaster dir in our utilities (avoid import loops)
# this is also available as sys.path[-1], but I don't want to rely on that

master_dir = os.path.split(__file__)[0]
anybox.buildbot.openerp.BUILDMASTER_DIR = master_dir

# to run in console with pdb
#     $ twistd -b -y buildbot.tac
# (http://trac.buildbot.net/wiki/DebuggingBuildbotWithPDB),
# of course you need the twistd from the virtualenv

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

####### BUILDSLAVES

from anybox.buildbot.openerp import make_slaves
c['slaves'] = make_slaves('slaves.cfg')

# 'slavePortnum' defines the TCP port to listen on for connections from slaves.
# This must match the value configured into the buildslaves (with their
# --master option)
c['slavePortnum'] = 9989

####### BUILDERS

# The 'builders' list defines the Builders, which tell Buildbot how
# to perform a build, what steps, and which slaves can execute them.

# GR a build process is actually described by a BuildFactory
# we'll have a factory per registered buildout. For now, bootstrapping with
# one, assuming the slave is on the same host and can access the master dir

from buildbot import locks
from buildbot.process.factory import BuildFactory
from buildbot.steps.shell import ShellCommand
from buildbot.steps.shell import SetProperty
from buildbot.steps.transfer import FileDownload
from buildbot.process.properties import WithProperties
from buildbot.process.properties import Property

# Running buildouts in parallel on one slave fails
# if they used shared eggs or downloads area
buildout_lock = locks.SlaveLock("buildout")

build_factories = {} # this dict is not a buildbot standard

PGCLUSTER = WithProperties('%(pg_version)s/%(pg_cluster:-main)s')

oerp61 = build_factories['openerp-6.1'] = BuildFactory()
oerp61.addStep(FileDownload(mastersrc='buildouts/bootstrap.py',
                            slavedest='bootstrap.py'))
oerp61.addStep(FileDownload(mastersrc='buildouts/6.1.cfg',
                            slavedest='buildout.cfg'))
oerp61.addStep(ShellCommand(command=['python', 'bootstrap.py']))
oerp61.addStep(ShellCommand(command=['bin/buildout'],
                            locks=[buildout_lock.access('exclusive')]))
oerp61.addStep(SetProperty(
        property='testing_db',
        command=WithProperties(
            "echo %(db_prefix:-openerb-buildbot)s-openerp-6.1")))

oerp61.addStep(ShellCommand(command=["dropdb", Property('testing_db')],
                            name='dropdb',
                            description=["dropdb", Property('testing_db')],
                            env=dict(PGCLUSTER=PGCLUSTER),
                            flunkOnFailure=False))
oerp61.addStep(ShellCommand(command=["createdb", Property('testing_db')],
                            name='createdb',
                            description=["createdb", Property('testing_db')],
                            env=dict(PGCLUSTER=PGCLUSTER),
                            ))

oerp61.addStep(ShellCommand(command=[
            'bin/start_openerp', '-i', 'all',
            '--stop-after-init',
            '--log-level=test', '-d', Property('testing_db'),
            # openerp --logfile does not work with relative paths !
            WithProperties('--logfile=%(workdir)s/build/test.log')],
                            name='testing',
                            description='ran tests',
                            logfiles=dict(test='test.log'),
                            ))

# Builders join factories and slaves. A builder is a column in the waterfall
# it is therefore recommended to make different builders for significant
# environment differences (e.g., postgresql version). Our utilities will
# make that automatic.
from anybox.buildbot.openerp import make_builders

c['builders'] = make_builders(master_config=c, build_factories=build_factories)

####### CHANGESOURCES
# GR TODO later

c['change_source'] = []

####### SCHEDULERS

from buildbot.schedulers.forcesched import ForceScheduler
from buildbot.schedulers.forcesched import FixedParameter
from buildbot.schedulers.forcesched import UserNameParameter

c['schedulers'] = [ForceScheduler(
        name='force',
        revision=FixedParameter(name="revision", default=""),
        repository=FixedParameter(name="repository", default=""),
        project=FixedParameter(name="repository", default=""),
        username=UserNameParameter(label="your name:<br>", size=80),
        builderNames=[builder.name for builder in c['builders']],

        )
]

####### STATUS TARGETS

# 'status' is a list of Status Targets. The results of each build will be
# pushed to these targets. buildbot/status/*.py has a variety to choose from,
# including web pages, email senders, and IRC bots.

c['status'] = []

from buildbot.status import html
from buildbot.status.web import authz, auth

authz_cfg=authz.Authz(
    # change any of these to True to enable; see the manual for more
    # options
    auth=auth.BasicAuth([("admin","admin")]), # GR TODO external or LDAP
    gracefulShutdown = False,
    forceBuild = True,
    forceAllBuilds = False,
    pingBuilder = False,
    stopBuild = 'auth',
    stopAllBuilds = False,
    cancelPendingBuild = False,
)
c['status'].append(html.WebStatus(http_port=8010, authz=authz_cfg))

####### PROJECT IDENTITY

# the 'title' string will appear at the top of this buildbot
# installation's html.WebStatus home page (linked to the
# 'titleURL') and is embedded in the title of the waterfall HTML page.

c['title'] = "Anybox openerp buildbot"
c['titleURL'] = "http://anybox.fr"

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server (usually the html.WebStatus page) is visible. This
# typically uses the port number set in the Waterfall 'status' entry, but
# with an externally-visible host name which the buildbot cannot figure out
# without some help.

c['buildbotURL'] = "http://localhost:8010/" # TODO

####### DB URL

c['db'] = {
    # This specifies what database buildbot uses to store its state.  You can leave
    # this at its default for all but the largest installations.
    'db_url' : "sqlite:///state.sqlite",
}
